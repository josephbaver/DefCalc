#Necessary packages 
library(dplyr)
library(shiny)
library(readr)
library(tidyverse)
library(openxlsx)
library(DT)
library(s3tools)

#Download cleaned OBR data .xlsx (not currently in use)
#download_file_from_s3("alpha-sandbox/obr.xlsx", "obr.xlsx", overwrite = TRUE)
#index_obr_all <- readWorkbook("obr.xlsx", sheet = "all", colNames = TRUE, rowNames = TRUE)
#index_obr_qtr <- readWorkbook("obr.xlsx", sheet = "qtr", colNames = TRUE, rowNames = TRUE)
#index_obr_pa <- readWorkbook("obr.xlsx", sheet = "pa", colNames = TRUE, rowNames = TRUE)
#index_obr_fy <- readWorkbook("obr.xlsx", sheet = "fy", colNames = TRUE, rowNames = TRUE)

#Download cleaned OBR data .csv, and re-adds rownames
index_obr_all <- s3_path_to_full_df("alpha-sandbox/obr_all.csv")
  index_obr_all <- data.frame(index_obr_all, row.names=1)
index_obr_qtr <- s3_path_to_full_df("alpha-sandbox/obr_qtr.csv")
  index_obr_qtr <- data.frame(index_obr_qtr, row.names=1)
index_obr_pa <- s3_path_to_full_df("alpha-sandbox/obr_pa.csv")
  index_obr_pa <- data.frame(index_obr_pa, row.names=1)
index_obr_fy <- s3_path_to_full_df("alpha-sandbox/obr_fy.csv")
  index_obr_fy <- data.frame(index_obr_fy, row.names=1)
  
#User interface controls
ui <- shinyUI(fluidPage(
  headerPanel('Indexation Tool'), #title of app
  helpText("Insert useful information/instructions here"), #text instructions/guidance
  sidebarPanel(
    #dropdown menus: indices = different indices available; period = time scale for indices; baseyear = year chosen as 'Index=100'
    selectInput(inputId = "indices", label = "Index", choices = colnames(index_obr_all)),
    selectInput(inputId = "period", label = "Period Reference", choices = c("Quarterly", "Calendar Year", "Financial Year")),
    uiOutput("base")
  ),
  mainPanel(
    dataTableOutput("indextable")
  )
))

#Behind-the-scenes code
server <- function(input, output) {
  
  #ensures correct time scale is chosen
  chosen_index = reactiveValues()
  observeEvent(input$period, {
    if(input$period == "Quarterly") {
      chosen_index$data = index_obr_qtr
      chosen_index$rownames = rownames(index_obr_qtr)
    } else if(input$period == "Calendar Year") {
      chosen_index$data = index_obr_pa
      chosen_index$rownames = rownames(index_obr_pa)
    } else if(input$period == "Financial Year") {
      chosen_index$data = index_obr_fy
      chosen_index$rownames = rownames(index_obr_fy)
    } else {
      chosen_index$data = index_obr_all
      chosen_index$rownames = rownames(index_obr_all)
    }
  })
  
  #generates correct base period dropdown menu
  output$base <- renderUI({
    selectInput(inputId = "base", label = "Base Period", choices = chosen_index$rownames)
  })
  
  #ensures index is rebased
  observeEvent(input$base, {
    base_value <- index_obr_all[input$base, input$indices]
    chosen_index$mutate = chosen_index$data %>% (input$indices = input$indices / base_value)
  })
  
  #ensures correct index (and year-on-year change) is chosen
  output_table <- reactive({
    chosen_index$mutate %>% select(which(colnames(chosen_index$data) == input$indices)+8, input$indices)
  })
  
  #produces output table, and provides customisability
  output$indextable <- DT::renderDT(
    output_table(),
      options = list(pageLength = 10, info = FALSE, lengthMenu = list(c(10, -1), c("10", "All")))) #%>%
      #formatRound(columns = c(1), digits = 2) %>%
      #formatRound(columns = c(2), digits = 2) %>%
      #formatStyle(columns = c(1:2), 'text-align' = 'right')
}

#Line to run the app
shinyApp(ui = ui, server = server)
